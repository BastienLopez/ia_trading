version: '3.8'

services:
  # Service Dashboard principal
  dashboard:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: ai_trading_dashboard
    restart: unless-stopped
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../models:/app/models
    ports:
      - "8050:8050"
      - "8501:8501"
      - "8000:8000" 
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - TF_CPP_MIN_LOG_LEVEL=2
      - PYTHONPATH=/app
      - DASH_DEBUG=true
      - HOST=0.0.0.0
      - PORT=8050
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: python3 -m ai_trading.dashboard.app

  # Service Web App (Interface utilisateur)
  web_app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: ai_trading_web_app
    restart: unless-stopped
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../web_app/data:/app/web_app/data
      - ../web_app/info_retour:/app/web_app/info_retour
    ports:
      - "5000:5000"
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - API_URL=http://dashboard:8000
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: python3 -m web_app.app
    depends_on:
      - dashboard

  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ai_trading_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_trading}
      POSTGRES_USER: ${POSTGRES_USER:-ai_trading}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ai_trading_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai_trading}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Redis pour la mise en cache
  redis:
    image: redis:7-alpine
    container_name: ai_trading_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data: 