//@version=6
indicator("BTC Trading Signals", overlay=true)

// === PARAMÈTRES ===
// RSI
rsi_length = input.int(14, "RSI Length", minval=1)
rsi_overbought = input.float(70, "RSI Overbought", minval=0, maxval=100)
rsi_oversold = input.float(30, "RSI Oversold", minval=0, maxval=100)

// MACD
macd_fast = input.int(12, "MACD Fast Length", minval=1)
macd_slow = input.int(26, "MACD Slow Length", minval=1)
macd_signal = input.int(9, "MACD Signal Length", minval=1)

// EMA
ema_short = input.int(9, "EMA Short Length", minval=1)
ema_long = input.int(21, "EMA Long Length", minval=1)

// Ichimoku
tenkan_len = input.int(9, "Tenkan-Sen Length", minval=1)
kijun_len = input.int(26, "Kijun-Sen Length", minval=1)
senkou_span_b_len = input.int(52, "Senkou Span B Length", minval=1)
displacement = input.int(26, "Displacement", minval=1)

// Bollinger Bands
bb_length = input.int(20, "BB Length", minval=1)
bb_mult = input.float(2.0, "BB StdDev", minval=0.001, maxval=5)

// Volume Profile
show_vp = input.bool(true, "Show Volume Profile")
vp_lookback = input.int(20, "Volume Profile Lookback", minval=1)

// Paramètres d'affichage
show_ichimoku = input.bool(false, "Afficher Ichimoku Cloud", group="Affichage")
show_bb = input.bool(false, "Afficher Bollinger Bands", group="Affichage")
show_minor_signals = input.bool(false, "Afficher signaux mineurs", group="Affichage")
show_logs = input.bool(true, "Afficher logs détaillés", group="Affichage")
show_market_strength = input.bool(true, "Afficher Force de Marché", group="Affichage")

// === CALCUL DES INDICATEURS ===
// Indicateurs existants
rsi = ta.rsi(close, rsi_length)
[macd_line, signal_line, hist_line] = ta.macd(close, macd_fast, macd_slow, macd_signal)
ema9 = ta.ema(close, ema_short)
ema21 = ta.ema(close, ema_long)

// Ichimoku Cloud
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))
tenkan = donchian(tenkan_len)
kijun = donchian(kijun_len)
senkou_span_a = math.avg(tenkan, kijun)
senkou_span_b = donchian(senkou_span_b_len)

// Bollinger Bands
[bb_middle, bb_upper, bb_lower] = ta.bb(close, bb_length, bb_mult)
bb_squeeze = (bb_upper - bb_lower) / bb_middle < 0.1

// Volume Profile
vp_sum = 0.0
vp_green_sum = 0.0
for i = 0 to vp_lookback-1
    vp_sum := vp_sum + volume[i]
    vp_green_sum := vp_green_sum + (close[i] > open[i] ? volume[i] : 0)
vp_ratio = vp_green_sum / vp_sum
volume_surge = volume > ta.sma(volume, 20) * 2

// === CONDITIONS DE SIGNAL ===
// Conditions élémentaires
rsi_oversold_condition = rsi < rsi_oversold
rsi_overbought_condition = rsi > rsi_overbought
macd_bullish = ta.crossover(macd_line, signal_line)
macd_bearish = ta.crossunder(macd_line, signal_line)
ema_bullish = ta.crossover(ema9, ema21)
ema_bearish = ta.crossunder(ema9, ema21)
cloud_bullish = close > senkou_span_a and close > senkou_span_b and tenkan > kijun
cloud_bearish = close < senkou_span_a and close < senkou_span_b and tenkan < kijun
high_vol_bullish = vp_ratio > 0.7 and volume_surge
high_vol_bearish = vp_ratio < 0.3 and volume_surge

// Variables pour suivi des logs
rsi_bull_signal = false
rsi_bear_signal = false
macd_bull_signal = false
macd_bear_signal = false
ema_bull_signal = false
ema_bear_signal = false
cloud_bull_signal = false
cloud_bear_signal = false
bb_bull_signal = false
bb_bear_signal = false

// === CALCUL DES SIGNAUX COMBINÉS ===
// Force du signal (de 0 à 3)
bullish_strength = 0
bearish_strength = 0

// Ajouter des forces selon les indicateurs
if rsi_oversold_condition
    bullish_strength := bullish_strength + 1
    rsi_bull_signal := true
    
if rsi_overbought_condition
    bearish_strength := bearish_strength + 1
    rsi_bear_signal := true
    
if macd_bullish
    bullish_strength := bullish_strength + 1
    macd_bull_signal := true
    
if macd_bearish
    bearish_strength := bearish_strength + 1
    macd_bear_signal := true
    
if ema_bullish
    bullish_strength := bullish_strength + 1
    ema_bull_signal := true
    
if ema_bearish
    bearish_strength := bearish_strength + 1
    ema_bear_signal := true
    
if cloud_bullish and volume_surge
    bullish_strength := bullish_strength + 2
    cloud_bull_signal := true
    
if cloud_bearish and volume_surge
    bearish_strength := bearish_strength + 2
    cloud_bear_signal := true
    
if bb_squeeze and high_vol_bullish
    bullish_strength := bullish_strength + 1
    bb_bull_signal := true
    
if bb_squeeze and high_vol_bearish
    bearish_strength := bearish_strength + 1
    bb_bear_signal := true

// Signaux finaux
weak_buy_signal = bullish_strength == 1
medium_buy_signal = bullish_strength == 2
strong_buy_signal = bullish_strength >= 3
weak_sell_signal = bearish_strength == 1
medium_sell_signal = bearish_strength == 2
strong_sell_signal = bearish_strength >= 3

// === AFFICHAGE ===
// Plots conditionnels sans blocs if - Solution avec opérateurs sûrs
ichimoku_span_a = show_ichimoku ? senkou_span_a : 0.0
ichimoku_span_b = show_ichimoku ? senkou_span_b : 0.0
ichimoku_tenkan = show_ichimoku ? tenkan : 0.0
ichimoku_kijun = show_ichimoku ? kijun : 0.0

bollinger_upper = show_bb ? bb_upper : 0.0
bollinger_lower = show_bb ? bb_lower : 0.0

// Plots pour Ichimoku seulement s'il est activé
plot(show_ichimoku ? ichimoku_span_a : na, "Senkou Span A", color=color.new(color.green, 70))
plot(show_ichimoku ? ichimoku_span_b : na, "Senkou Span B", color=color.new(color.red, 70))
plot(show_ichimoku ? ichimoku_tenkan : na, "Tenkan-Sen", color=color.blue)
plot(show_ichimoku ? ichimoku_kijun : na, "Kijun-Sen", color=color.red)

// Coloration du nuage Ichimoku si activé
spanA = plot(show_ichimoku ? ichimoku_span_a : na, "", color=na)
spanB = plot(show_ichimoku ? ichimoku_span_b : na, "", color=na)
fill(spanA, spanB, color=show_ichimoku ? (ichimoku_span_a > ichimoku_span_b ? color.new(color.green, 90) : color.new(color.red, 90)) : na)

// Plots Bollinger Bands
plot(show_bb ? bollinger_upper : na, "BB Upper", color=color.new(color.blue, 50))
plot(show_bb ? bollinger_lower : na, "BB Lower", color=color.new(color.blue, 50))

// Plots des signaux mineurs
plotshape(show_minor_signals ? rsi_oversold_condition : false, title="RSI Oversold", location=location.belowbar, color=color.new(color.green, 40), style=shape.triangleup, size=size.tiny)
plotshape(show_minor_signals ? rsi_overbought_condition : false, title="RSI Overbought", location=location.abovebar, color=color.new(color.red, 40), style=shape.triangledown, size=size.tiny)
plotshape(show_minor_signals ? macd_bullish : false, title="MACD Bullish", location=location.belowbar, color=color.new(color.green, 40), style=shape.diamond, size=size.tiny)
plotshape(show_minor_signals ? macd_bearish : false, title="MACD Bearish", location=location.abovebar, color=color.new(color.red, 40), style=shape.diamond, size=size.tiny)
plotshape(show_minor_signals ? ema_bullish : false, title="EMA Bullish", location=location.belowbar, color=color.new(color.green, 40), style=shape.circle, size=size.tiny)
plotshape(show_minor_signals ? ema_bearish : false, title="EMA Bearish", location=location.abovebar, color=color.new(color.red, 40), style=shape.circle, size=size.tiny)

// Signaux principaux (toujours affichés)
plotshape(medium_buy_signal, title="Medium Buy", location=location.belowbar, color=color.new(color.green, 20), style=shape.triangleup, size=size.small)
plotshape(medium_sell_signal, title="Medium Sell", location=location.abovebar, color=color.new(color.red, 20), style=shape.triangledown, size=size.small)
plotshape(strong_buy_signal, title="Strong Buy", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.normal)
plotshape(strong_sell_signal, title="Strong Sell", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.normal)

// == INDICATEUR DE FORCE DU MARCHÉ ==
// Indice de force des tendances (de -100 à +100)
market_strength = math.max(-100, math.min(100, (bullish_strength - bearish_strength) * 33))

// Création de l'histogramme de force du marché
strength_color = market_strength > 75 ? color.green : 
               market_strength > 25 ? color.lime : 
               market_strength > 0 ? color.teal : 
               market_strength < -75 ? color.red : 
               market_strength < -25 ? color.maroon : 
               color.orange

// Histogramme de force du marché en bas du graphe principal
plotchar(show_market_strength ? market_strength : na, "Force de Marché", "", location.bottom, strength_color, size=size.tiny, display=display.none)
bgcolor(show_market_strength ? color.new(strength_color, 95) : na)

// Table de débogage améliorée
var table debug_table = table.new(position.top_right, 3, 3, bgcolor=color.new(color.black, 20))
table.cell(debug_table, 0, 0, "Force Haussière", bgcolor=color.green, text_color=color.white)
table.cell(debug_table, 1, 0, "Force Baissière", bgcolor=color.red, text_color=color.white)
table.cell(debug_table, 2, 0, "Score Global", bgcolor=color.gray, text_color=color.white)
table.cell(debug_table, 0, 1, str.tostring(bullish_strength), text_color=color.white)
table.cell(debug_table, 1, 1, str.tostring(bearish_strength), text_color=color.white)
table.cell(debug_table, 2, 1, str.tostring(market_strength), text_color=color.white)
table.cell(debug_table, 0, 2, strong_buy_signal ? "FORT ACHAT" : medium_buy_signal ? "ACHAT" : "", bgcolor=color.green, text_color=color.white)
table.cell(debug_table, 1, 2, strong_sell_signal ? "FORTE VENTE" : medium_sell_signal ? "VENTE" : "", bgcolor=color.red, text_color=color.white)
table.cell(debug_table, 2, 2, market_strength > 50 ? "HAUSSIER" : market_strength < -50 ? "BAISSIER" : "NEUTRE", text_color=color.white)

// Table de logs détaillés
var table log_table = show_logs ? table.new(position.bottom_right, 5, 8, bgcolor=color.new(color.black, 20)) : na

// Remplir la table de logs seulement si activé (en dehors d'un bloc if)
f_update_log_table() =>
    if show_logs
        table.cell(log_table, 0, 0, "LOGS DÉTAILLÉS", bgcolor=color.blue, text_color=color.white)
        table.cell(log_table, 0, 1, "Signal", bgcolor=color.gray, text_color=color.white)
        table.cell(log_table, 1, 1, "État", bgcolor=color.gray, text_color=color.white)
        table.cell(log_table, 2, 1, "Valeur", bgcolor=color.gray, text_color=color.white)
        table.cell(log_table, 3, 1, "Seuil", bgcolor=color.gray, text_color=color.white)
        table.cell(log_table, 4, 1, "Activé", bgcolor=color.gray, text_color=color.white)
        
        // RSI
        rsi_color = rsi_bull_signal ? color.green : rsi_bear_signal ? color.red : color.white
        table.cell(log_table, 0, 2, "RSI", text_color=color.white)
        table.cell(log_table, 1, 2, rsi_oversold_condition ? "Survente" : rsi_overbought_condition ? "Surachat" : "Neutre", text_color=rsi_color)
        table.cell(log_table, 2, 2, str.tostring(rsi, "#.##"), text_color=rsi_color)
        table.cell(log_table, 3, 2, rsi_oversold_condition ? "<" + str.tostring(rsi_oversold) : rsi_overbought_condition ? ">" + str.tostring(rsi_overbought) : "-", text_color=rsi_color)
        table.cell(log_table, 4, 2, rsi_bull_signal or rsi_bear_signal ? "OUI" : "NON", bgcolor=rsi_bull_signal ? color.green : rsi_bear_signal ? color.red : color.gray, text_color=color.white)
        
        // MACD
        macd_color = macd_bull_signal ? color.green : macd_bear_signal ? color.red : color.white
        table.cell(log_table, 0, 3, "MACD", text_color=color.white)
        table.cell(log_table, 1, 3, macd_bullish ? "Croisement ↑" : macd_bearish ? "Croisement ↓" : "Neutre", text_color=macd_color)
        table.cell(log_table, 2, 3, str.tostring(macd_line, "#.##") + " vs " + str.tostring(signal_line, "#.##"), text_color=macd_color)
        table.cell(log_table, 3, 3, macd_bullish ? "Croisement ↑" : macd_bearish ? "Croisement ↓" : "-", text_color=macd_color)
        table.cell(log_table, 4, 3, macd_bull_signal or macd_bear_signal ? "OUI" : "NON", bgcolor=macd_bull_signal ? color.green : macd_bear_signal ? color.red : color.gray, text_color=color.white)
        
        // EMA
        ema_color = ema_bull_signal ? color.green : ema_bear_signal ? color.red : color.white
        table.cell(log_table, 0, 4, "EMA", text_color=color.white)
        table.cell(log_table, 1, 4, ema_bullish ? "Croisement ↑" : ema_bearish ? "Croisement ↓" : "Neutre", text_color=ema_color)
        table.cell(log_table, 2, 4, str.tostring(ema9, "#.##") + " vs " + str.tostring(ema21, "#.##"), text_color=ema_color)
        table.cell(log_table, 3, 4, ema_bullish ? "EMA9 > EMA21" : ema_bearish ? "EMA9 < EMA21" : "-", text_color=ema_color)
        table.cell(log_table, 4, 4, ema_bull_signal or ema_bear_signal ? "OUI" : "NON", bgcolor=ema_bull_signal ? color.green : ema_bear_signal ? color.red : color.gray, text_color=color.white)
        
        // Cloud
        cloud_color = cloud_bull_signal ? color.green : cloud_bear_signal ? color.red : color.white
        table.cell(log_table, 0, 5, "ICHIMOKU", text_color=color.white)
        table.cell(log_table, 1, 5, cloud_bullish ? "Au-dessus" : cloud_bearish ? "En-dessous" : "Neutre", text_color=cloud_color)
        table.cell(log_table, 2, 5, "Tenkan: " + str.tostring(tenkan, "#.##") + " Kijun: " + str.tostring(kijun, "#.##"), text_color=cloud_color)
        table.cell(log_table, 3, 5, "Vol: " + (volume_surge ? "FORT" : "Normal"), text_color=cloud_color)
        table.cell(log_table, 4, 5, cloud_bull_signal or cloud_bear_signal ? "OUI" : "NON", bgcolor=cloud_bull_signal ? color.green : cloud_bear_signal ? color.red : color.gray, text_color=color.white)
        
        // BB Squeeze
        bb_color = bb_bull_signal ? color.green : bb_bear_signal ? color.red : color.white
        table.cell(log_table, 0, 6, "BB SQUEEZE", text_color=color.white)
        table.cell(log_table, 1, 6, bb_squeeze ? "Actif" : "Inactif", text_color=bb_color)
        table.cell(log_table, 2, 6, str.tostring((bb_upper - bb_lower) / bb_middle * 100, "#.##") + "%", text_color=bb_color)
        table.cell(log_table, 3, 6, "Seuil: 10%", text_color=bb_color)
        table.cell(log_table, 4, 6, bb_bull_signal or bb_bear_signal ? "OUI" : "NON", bgcolor=bb_bull_signal ? color.green : bb_bear_signal ? color.red : color.gray, text_color=color.white)
        
        // Volume
        volume_color = high_vol_bullish ? color.green : high_vol_bearish ? color.red : color.white
        table.cell(log_table, 0, 7, "VOLUME", text_color=color.white)
        table.cell(log_table, 1, 7, high_vol_bullish ? "Achat Fort" : high_vol_bearish ? "Vente Forte" : "Neutre", text_color=volume_color)
        table.cell(log_table, 2, 7, str.tostring(vp_ratio * 100, "#.##") + "%", text_color=volume_color)
        table.cell(log_table, 3, 7, "Ratio Achat/Vente", text_color=volume_color)
        table.cell(log_table, 4, 7, high_vol_bullish or high_vol_bearish ? "OUI" : "NON", bgcolor=high_vol_bullish ? color.green : high_vol_bearish ? color.red : color.gray, text_color=color.white)

// Appel de la fonction pour mettre à jour la table
f_update_log_table()

// Alerte principale
alertcondition(medium_buy_signal or strong_buy_signal or medium_sell_signal or strong_sell_signal, title="Signal Alert", message="Signal détecté sur {{ticker}} - {{interval}}") 