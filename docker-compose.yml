version: '3.8'

services:
  # Service principal d'IA Trading
  ai_trading:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: ai_trading
    restart: unless-stopped
    env_file: .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      - postgres

  # Base de données PostgreSQL pour le stockage persistant
  postgres:
    image: postgres:15-alpine
    container_name: ai_trading_db
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_trading}
      POSTGRES_USER: ${POSTGRES_USER:-ai_trading}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai_trading}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour le cache et les files d'attente
  redis:
    image: redis:7-alpine
    container_name: ai_trading_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service de monitoring avec Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ai_trading_grafana
    restart: unless-stopped
    env_file: .env
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - postgres

  # Service de collecte de métriques avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_trading_prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data: 